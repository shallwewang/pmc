/**
 * 上海浩亚机电股份有限公司
 * MES事业部
 * 2017 CopyRight
 */
package com.bluebirdme.mes.pmc.controller;

import com.bluebirdme.mes.core.base.controller.BaseController;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import com.bluebirdme.mes.core.annotation.Journal;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import org.xdemo.superutil.j2se.StringUtils;

import com.bluebirdme.mes.core.annotation.Journal;
import com.bluebirdme.mes.core.annotation.NoAuth;
import com.bluebirdme.mes.core.annotation.support.LogType;
import com.bluebirdme.mes.core.base.controller.BaseController;
import com.bluebirdme.mes.core.base.entity.Filter;
import com.bluebirdme.mes.core.base.entity.Page;
import com.bluebirdme.mes.core.exception.BusinessException;
import com.bluebirdme.mes.core.valid.annotations.Valid;
import com.bluebirdme.mes.core.constant.Constant;
import com.bluebirdme.mes.platform.entity.User;
import com.bluebirdme.mes.pmc.entity.Plant;
import com.bluebirdme.mes.pmc.service.IPlantService;
import com.google.gson.GsonBuilder;

import org.xdemo.superutil.thirdparty.gson.GsonTools;

/**
 * 工厂Controller
 * 
 * @author shallwe_wang
 * @Date 2017-8-9 11:07:39
 */
@Controller
@RequestMapping("/plant")
@Journal(name = "工厂")
public class PlantController extends BaseController {

	// 工厂页面
	final String index = "pmc/baseDate/plant";
	final String addOrEdit = "pmc/baseDate/plantAddOrEdit";

	@Resource
	IPlantService plantService;

	@Journal(name = "首页")
	@RequestMapping(method = RequestMethod.GET)
	public String index() {
		return index;
	}

	@NoAuth
	@ResponseBody
	@Journal(name = "获取工厂列表信息")
	@RequestMapping("list")
	public String getPlant(Filter filter, Page page) throws Exception {
		return GsonTools.toJson(plantService.findPageInfo(filter, page));
	}

	@NoAuth
	@ResponseBody
	@Journal(name = "获取工厂列表信息")
	@RequestMapping("combotree")
	public String combotree() {
		return GsonTools.toJson(plantService.combotree());
	}

	@Journal(name = "添加工厂页面")
	@RequestMapping(value = "add", method = RequestMethod.GET)
	public ModelAndView _add(Plant plant) {
		return new ModelAndView(addOrEdit, model.addAttribute("plant", plant));
	}

	@ResponseBody
	@Journal(name = "保存工厂", logType = LogType.DB)
	@RequestMapping(value = "add", method = RequestMethod.POST)
	@Valid
	public String add(Plant plant) throws Exception {
		Map<String, Object> map = new HashMap<>();
		map.put("plantCode", plant.getPlantCode());
		if (plantService.isExist(Plant.class, map)) {
			return ajaxError("工厂代码重复");
		}
		Long userId = Long.valueOf(session.getAttribute(
				Constant.CURRENT_USER_ID).toString());
		plant.setCreateBy(userId);
		plant.setCreateTime(new java.util.Date());
		plantService.save(plant);
		return GsonTools.toJson(plant);
	}

	@Journal(name = "编辑工厂页面")
	@RequestMapping(value = "edit", method = RequestMethod.GET)
	public ModelAndView _edit(Plant plant) {
		plant = plantService.findById(Plant.class, plant.getId());
		return new ModelAndView(addOrEdit, model.addAttribute("plant", plant));
	}

	@ResponseBody
	@Journal(name = "编辑工厂", logType = LogType.DB)
	@RequestMapping(value = "edit", method = RequestMethod.POST)
	@Valid
	public String edit(Plant plant) throws Exception {
		Plant _plant = plantService.findById(Plant.class, plant.getId());
		Map<String, Object> map = new HashMap<>();
		map.put("plantCode", plant.getPlantCode());
		if (!_plant.getPlantCode().equals(plant.getPlantCode())
				&& plantService.isExist(Plant.class, map)) {
			throw new Exception("工厂编码重复:" + plant.getPlantCode());
		}
		Long userId = Long.valueOf(session.getAttribute(
				Constant.CURRENT_USER_ID).toString());
		plant.setChangeTime(new java.util.Date());

		plantService.update(plant);
		return GsonTools.toJson(plant);
	}

	@ResponseBody
	@Journal(name = "删除工厂", logType = LogType.DB)
	@RequestMapping(value = "delete", method = RequestMethod.POST)
	public String edit(String ids) throws Exception {
		plantService.delete(Plant.class, ids);
		return Constant.AJAX_SUCCESS;
	}

}